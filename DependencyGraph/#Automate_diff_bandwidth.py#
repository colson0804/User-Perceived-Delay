import subprocess
import shlex
import sys
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from urlparse import urlparse
import time
import requests
import logging
import sys
import json
import os
import subprocess
import psutil
import argparse
import time

def automate_driver(file_name):
    # runs firefox-driver.py from the shell to query a given url 15 times
    driver = shlex.split("python firefox-driver.py -f proxyvisit -fu http://www.wsj.com -t 15 -c air_configure -p WSJ")
    if subprocess.call(driver) != 0:
    	sys.exit()

    # runs LogAnalysis.py from the shell to get the common urls from the firefox-driver output
    commonurl = shlex.split("python LogAnalysis.py -f getcommonurl -d logs -p WSJ -ho wsjHostList")
    subprocess.call(commonurl)

    # runs LogAnalysis.py from the shell to generate a dependency graph from the common urls
    graph = shlex.split("python LogAnalysis.py -f generategraph -p WSJ -d ./logs/ -fu http://www.wsj.com/ -go wsjGraph -lu http://video-api.wsj.com/api-video/player/v2/css/wsjvideo.min.css -c wsjHostList")
    subprocess.call(graph)

def automate_analyze(host_name, graph_name, last_url, bandwidth):
    # setting up bandwidth...
    bandwidth_in_bits = bandwidth * 8
    #dnctl = shlex.split("sudo wondershaper -a eth0 -d %d -u 512" % bandwidth_in_bits)
    #subproces:s.call(dnctl)
    #dummynet = shlex.split("echo \"dummynet in all pipe 1\" >> /etc/pf.conf")
    #subprocess.call(dummynet)


    # define url to query and firefox profile to use
    url = "http://www.wsj.com/"   
    profile = webdriver.FirefoxProfile("/home/yanghu/.mozilla/firefox/cv0k6zw7.default")

    # run the data 5 times and collect the average from all 5 trials
    for it in range(1,6):
	f = open("broscript/test.txt", "w")
        listen = shlex.split("sudo /usr/local/bro/bin/bro -i eth0 -C broscript/httpinfo.bro")
        browser = webdriver.Firefox(profile)
        background = subprocess.Popen(listen, stdout = f)

        openNewTab(browser)
    	browser.get(url)

    	time.sleep(1)
    	background.terminate()
    #f.close()
    	closeCurrentTab(browser)
    #broweser.quit()   
    	output = open("%dkb_output.txt" % bandwidth, "a+")
    	analyze = shlex.split("python LogAnalysis.py -f analyzebrolog -fu http://www.wsj.com/ -lu " + last_url + " -gi " + graph_name + " -c " + host_name + " -b broscript/test.txt")
    	subprocess.call(analyze, stderr=output)
        f.close()
        output.close()
    

    browser.quit()
    clearm = shlex.split("sudo wondershaper -c -a eth0")
    subprocess.call(clearm)


"""
    nf = open("%dkb_output.txt" % bandwidth, "r")
    rtt = nf.readline()
    size = nf.readline()
    obj = nf.readline()
    lat = nf.readline()
    lat0 = lat[10:len(lat)-2]
    nf.readline()
    nf.readline()
    nf.readline()
    lat = nf.readline()
    lat1 = lat[10:len(lat)-2]
    nf.readline()
    nf.readline()
    nf.readline()
    lat = nf.readline()
    lat2 = lat[10:len(lat)-2]
    print lat0
    print lat1
    print lat2
    avg = float(lat0) + float(lat1) + float(lat2)
    avg = avg / 3.0
    nf.close()
    nf = open("%dkb_output.txt" % bandwidth, "w")
    nf.write(rtt)
    nf.write(size)
    nf.write(obj)
    nf.write("\"latency\":%d}\n" %avg)
    nf.close()
"""
def openNewTab(browser):
	if sys.platform == "darwin":
		ActionChains(browser).send_keys(Keys.COMMAND, "t").perform()
		ActionChains(browser).send_keys(Keys.COMMAND, "t").perform()
	elif sys.platform == "linux2":
		ActionChains(browser).send_keys(Keys.CONTROL, "t").perform()
		ActionChains(browser).send_keys(Keys.CONTROL, "t").perform()
	else:
		logger.error("openNewTab unsupported OS: %s"%sys.platform)

def closeCurrentTab(browser):
	if sys.platform == "darwin":
		browser.find_element_by_tag_name('body').send_keys(Keys.COMMAND + 'w')
	elif sys.platform == "linux2":
		browser.find_element_by_tag_name('body').send_keys(Keys.CONTROL + 'w')
	else:
		logger.error("closeCurrentTab unsupported OS: %s"%sys.platform)
    

if __name__ == '__main__':
    #file_name = sys.argv[1]
    host_name = sys.argv[1]
    graph_name = sys.argv[2]
    last_url = "http://video-api.wsj.com/api-video/player/v2/css/wsjvideo.min.css"
    
    #automate_driver(file_name)
    
    #bandwidth = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]
    bandwidth = range(10000,1000,-100)
    for i in bandwidth:
        #i = 10
        automate_analyze(host_name, graph_name, last_url, i)
